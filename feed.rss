<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Joshua Walsh</title><description>iOS/Mac Developer</description><link>https://joshuatwalsh.com</link><language>en</language><lastBuildDate>Fri, 24 Feb 2023 19:23:39 -0500</lastBuildDate><pubDate>Fri, 24 Feb 2023 19:23:39 -0500</pubDate><ttl>250</ttl><atom:link href="https://joshuatwalsh.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://joshuatwalsh.com/blog/02-24-2023-server-side-swift</guid><title>Server Side Swift: The Future of Web Development</title><description></description><link>https://joshuatwalsh.com/blog/02-24-2023-server-side-swift</link><pubDate>Fri, 24 Feb 2023 21:04:00 -0500</pubDate><content:encoded><![CDATA[<h1>Server Side Swift: The Future of Web Development</h1><h2>Introduction</h2><p>Swift was first introduced by Apple Inc. in 2014 as a general-purpose, multi-paradigm programming language. Initially, it was designed to work exclusively on Apple's platforms like iOS, macOS, and watchOS. However, in 2015, Apple made Swift an open-source language, and since then, it has gained tremendous popularity among developers. One of the most significant developments in the Swift community in recent years has been the emergence of Server-Side Swift.</p><h2>Benefits of Server-Side Swift</h2><p>One of the main advantages of using Swift for server-side development is its speed. Swift is a compiled language, which means that it is faster than interpreted languages like Python or Ruby. Additionally, Swift was designed to be a safe language, which means that it has features built-in to prevent common programming errors like null pointer exceptions or buffer overflows. This makes Swift an excellent choice for developers who want to build secure and reliable server-side applications.</p><p>Another benefit of using Swift for server-side development is its ease of use. Swift is a modern language with a concise syntax that is easy to learn. Additionally, Swift has a robust and growing ecosystem of packages and libraries that make it easy to build complex applications quickly.</p><p>Finally, Swift's interoperability with other programming languages is also a significant advantage. Swift can work seamlessly with other languages like C, Objective-C, and Python, which makes it easy to integrate with existing systems.</p><h2>Examples of Server-Side Swift</h2><p>Several companies have already adopted Swift for their server-side development needs. One such example is Uber, who migrated their dispatch system to Swift in 2016. Another example is LinkedIn, who uses Swift for their iOS app and server-side development.</p><p>Additionally, there are several open-source frameworks and libraries available for developers who want to use Swift for server-side development. Some of the most popular frameworks include Vapor, Perfect, and Kitura.</p><h2>Conclusion</h2><p>Server-Side Swift is still a relatively new concept, but its potential is enormous. With its speed, safety, ease of use, and interoperability, Swift is an excellent choice for developers who want to build secure and reliable server-side applications quickly. As more and more companies adopt Swift for their server-side development needs, we can expect to see a growing ecosystem of packages and libraries that will make it even easier to build complex applications with Swift.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://joshuatwalsh.com/blog/01-24-2021-enter-the-void</guid><title>Enter the Void</title><description>Have you every really looked into what Void is?</description><link>https://joshuatwalsh.com/blog/01-24-2021-enter-the-void</link><pubDate>Sun, 24 Jan 2021 21:04:00 -0500</pubDate><content:encoded><![CDATA[<h1>Welcome to the Void...explanation.</h1><p>Have you ever really looked into what <code>Void</code> is? Have you read the official <a href="https://developer.apple.com/documentation/swift/void">documentation</a>?</p><p>If not, no worries, it's nothing 😆.</p><h2>Declaration</h2><pre><code><span class="keyword">typealias</span> Void = ()
</code></pre><h2>But, why...?</h2><p>Why and how do we use <code>Void</code>? You've all seen it, and used it. When you declare a function or method without a return type, <code>Void</code> is included unless otherwise specified.</p><h2>Ok, but what is it really?</h2><p>If you look at the <code>typealias</code> declaration, you can see that <code>Void</code> is simply an empty tuple.</p><h2>Example</h2><pre><code><span class="keyword">func</span> logSomething(<span class="keyword">_</span> message: <span class="type">String</span>) -&gt; <span class="type">Void</span> {
    <span class="call">print</span>(<span class="string">"LOG:</span> \(message)<span class="string">"</span>)
}

<span class="keyword">let</span> log: (<span class="type">String</span>) -&gt; <span class="type">Void</span> = logSomething
<span class="call">log</span>(<span class="string">"Don't get too excited, it's just a message."</span>)
</code></pre><p>Another way you could look at <code>Void</code> would be:</p><pre><code><span class="keyword">func</span> doSomething() { ... }

<span class="comment">// This is the same as</span>

<span class="keyword">func</span> doSomething() -&gt; <span class="type">Void</span> { ... }
</code></pre><h2>Conclusion</h2><p>As you can see, <code>Void</code> is nothing. It's empty. And that's okay 👌. It doesn't have anything to prove to the other types. When you don't need to return a specified type, use <code>Void</code>. Or don't...it doesn't matter.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://joshuatwalsh.com/blog/01-10-2021-customizing-publish-site</guid><title>Customizing a Publish site</title><description>A detailed guide on customizing a website with the Publish framework.</description><link>https://joshuatwalsh.com/blog/01-10-2021-customizing-publish-site</link><pubDate>Sat, 16 Jan 2021 21:04:00 -0500</pubDate><content:encoded><![CDATA[<h1>Customizing your Publish site</h1><p>Welcome back 👋. If you read my previous post you already have your Publish site up on Github Pages. If not... read this <a href="https://www.joshuatwalsh.com/blog/01-07-2021-publish-and-github-pages/">Creating a website with Publish and Github Pages</a></p><p>Let's pick up where we left off. Our site is on Github Pages and now we want to make it look 👌.</p><p>Here is what we're going to do:</p><ol><li>Define our HTMLFactory</li><li>Add Nodes and resources for styling</li><li>Create a new theme</li></ol><h2>1. Defining our own HTML Factory</h2><p>Create a new file in <code>Sources</code>/<code>&lt;SiteName&gt;</code> called <code>HTMLFactory.swift</code>. This is where we'll add the methods required from the <code>HTMLFactory</code> protocol.</p><p>Start typing <em>makeIndexHTML</em> and Xcode should auto-complete this method for you.</p><pre><code><span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
</code></pre><p>As the docs state, this creates the HTML to use for the website's main index page. First, we need to change this part <code>PublishingContext&lt;Site&gt;</code> to use your <code>site</code> name. For example: <code>PublishingContext&lt;SwiftBySundell&gt;</code> 😉. This is the name of your site that is in <code>main.swift</code>. Or the struct that conforms to <code>Website</code>.</p><p>Let's go ahead and add the rest of the methods for <code>HTMLFactory</code> and we'll add to them later on.</p><pre><code><span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">SiteName</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
<span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
<span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
<span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>?
<span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>?
</code></pre><p>Again, don't forget to change <code>Site</code> to your site name.</p><h2>2. Adding Nodes to use in our HTMLFactory</h2><p>Create a new folder in <code>Sources/&lt;SiteName&gt;/</code> called <code>Nodes</code>. Then add a new file in that folder called <code>Node+Head.swift</code> In fact, to save some time we're going to just add all the files we need and go through them one by one. Here is what your project folder structure should look like when you're done.</p><pre><code>- <span class="type">Sources</span>
    - <span class="type">SiteName</span>
        - <span class="type">Nodes</span>
            - <span class="type">Node</span>+<span class="type">Head</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Header</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Grid</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Footer</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Page</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">PageContent</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">PageExcerpt</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Post</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Posts</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Sidebar</span>.<span class="property">swift</span>
            - <span class="type">Node</span>+<span class="type">Taglist</span>.<span class="property">swift</span>
        - main.<span class="property">swift</span>
        - <span class="type">HTMLFactory</span>.<span class="property">swift</span>
</code></pre><p>Ok, that seems like a lot, but we'll go through each one by one. We're going to define our <code>Head</code> for our site. This is where we link any stylesheets or other metadata for a typical HTML site, and we'll do the same here. I'm using a CSS framework called <a href="https://purecss.io">Pure.css</a> as boilerplate styling for my site. You can do the same, or go on your own adventure. Here is what our <code>Node+Head.swift</code> file should look like:</p><h3>Head</h3><pre><code><span class="keyword">import</span> Plot

<span class="keyword">extension</span> <span class="type">Node</span> <span class="keyword">where</span> <span class="type">Context</span> == <span class="type">HTML</span>.<span class="type">DocumentContext</span> {
    <span class="keyword">static func</span> head(for site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
        <span class="keyword">return</span> <span class="type">Node</span>.<span class="call">head</span>(
            .<span class="call">title</span>(<span class="string">"</span>\(site.<span class="property">name</span>) <span class="string">-</span> \(site.<span class="property">description</span>)<span class="string">"</span>),
            .<span class="call">meta</span>(
                .<span class="call">charset</span>(.<span class="dotAccess">utf8</span>),
                .<span class="call">name</span>(<span class="string">"viewport"</span>),
                .<span class="call">content</span>(<span class="string">"width=device-width, initial-scale=1"</span>)
            ),
            .<span class="call">link</span>(
                .<span class="call">rel</span>(.<span class="dotAccess">stylesheet</span>),
                .<span class="call">href</span>(<span class="string">"https://unpkg.com/purecss@1.0.1/build/pure-min.css"</span>),
                .<span class="keyword">init</span>(name: <span class="string">"integrity"</span>, value: <span class="string">"sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47"</span>),
                .<span class="keyword">init</span>(name: <span class="string">"crossorigin"</span>, value: <span class="string">"anonymous"</span>)
            ),
            .<span class="call">link</span>(
                .<span class="call">rel</span>(.<span class="dotAccess">stylesheet</span>),
                .<span class="call">href</span>(<span class="string">"https://unpkg.com/purecss@2.0.3/build/grids-responsive-min.css"</span>)
            ),
            .<span class="call">link</span>(
                .<span class="call">rel</span>(.<span class="dotAccess">stylesheet</span>),
                .<span class="call">href</span>(<span class="string">"/Pure/styles.css"</span>) <span class="comment">// We'll add this next</span>
            )
        )
    }
}
</code></pre><p>There is a file we haven't added yet - <code>styles.css</code>. Add a folder in <code>Resources/</code> called <code>Pure</code>. Then add a file called <code>styles.css</code>. This will be your styles you want to override from <code>Pure</code>. Also if you're confused about this part:</p><pre><code>.<span class="call">link</span>(
.<span class="call">rel</span>(.<span class="dotAccess">stylesheet</span>),
.<span class="call">href</span>(<span class="string">"https://unpkg.com/purecss@1.0.1/build/pure-min.css"</span>),
.<span class="keyword">init</span>(name: <span class="string">"integrity"</span>, value: <span class="string">"sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47"</span>),
.<span class="keyword">init</span>(name: <span class="string">"crossorigin"</span>, value: <span class="string">"anonymous"</span>)
),
</code></pre><p>This comes directly from the <code>Pure.css</code> site. We shouldn't need to touch this file much, or at all after setting it up. One down...ten to go...</p><p>Let's move on to <code>Node+Header.swift</code>. In each of our remaining <code>Node+</code> files we'll be importing <code>Plot</code> and extending <code>Node</code> like so:</p><pre><code><span class="keyword">import</span> Plot

<span class="keyword">extension</span> <span class="type">Node</span> <span class="keyword">where</span> <span class="type">Context</span> == <span class="type">HTML</span>.<span class="type">BodyContext</span>
</code></pre><p>I'll just be showing the contents of the extension going forward. Here is what our <code>Header</code> will look like:</p><p><strong><em>I'll call out any important notes.</em></strong></p><h3>Header</h3><pre><code><span class="keyword">static func</span> header(for site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">div</span>(
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"pure-menu pure-menu-horizontal pure-u-1-1 top-header"</span>),
            .<span class="call">a</span>(
                .<span class="call">class</span>(<span class="string">"pure-menu-heading"</span>),
                .<span class="call">text</span>(site.<span class="property">title</span>),
                .<span class="call">href</span>(<span class="string">"/"</span>)
            )
        )
    )
}
</code></pre><p><strong><em>NOTE</em></strong> Each <code>.div</code>, <code>.class</code>, <code>.a</code>, etc corresponds to an HTML node. You'd normally see these written out like so:</p><pre><code>&lt;div <span class="keyword">class</span>=<span class="string">"pure-menu pure-menu-horizontal pure-u-1-1 top-header"</span>&gt;
    &lt;a <span class="keyword">class</span>=<span class="string">"pure-menu-heading"</span> href=<span class="string">"/"</span>&gt;site.<span class="property">title</span>&lt;/a&gt;
&lt;/div&gt;
</code></pre><h3>Grid</h3><pre><code><span class="keyword">static func</span> grid(<span class="keyword">_</span> nodes: <span class="type">Node</span>...) -&gt; <span class="type">Node</span> {
    .<span class="call">div</span>(
        .<span class="call">id</span>(<span class="string">"layout"</span>),
        .<span class="call">class</span>(<span class="string">"pure-g"</span>),
        .<span class="call">group</span>(nodes)
    )
}
</code></pre><h3>Footer</h3><pre><code><span class="keyword">static func</span> footer(for site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">let</span> currentYear = <span class="type">Calendar</span>.<span class="property">current</span>.<span class="call">component</span>(.<span class="dotAccess">year</span>, from: <span class="type">Date</span>())
    <span class="keyword">return</span> .<span class="call">div</span>(
        .<span class="call">class</span>(<span class="string">"footer pure-u-1"</span>),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"pure-u-1"</span>),
            .<span class="call">text</span>(<span class="string">"©</span> \(currentYear) \(site.<span class="property">name</span>)<span class="string">"</span>)
        ),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"pure-u-1"</span>),
            .<span class="call">text</span>(<span class="string">"Generated using "</span>),
            .<span class="call">a</span>(
                .<span class="call">text</span>(<span class="string">"Publish"</span>),
                .<span class="call">href</span>(<span class="string">"https://github.com/johnsundell/publish"</span>)
            ),
            .<span class="call">text</span>(<span class="string">". Written in Swift"</span>)
        ),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"pure-u-1"</span>),
            .<span class="call">a</span>(
                .<span class="call">text</span>(<span class="string">"RSS feed"</span>),
                .<span class="call">href</span>(<span class="string">"/feed.rss"</span>)
            )
        )
    )
}
</code></pre><h3>Page</h3><pre><code><span class="keyword">static func</span> page(for page: <span class="type">Page</span>, on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">pageContent</span>(
        .<span class="call">h2</span>(
            .<span class="call">class</span>(<span class="string">"post-title"</span>),
            .<span class="call">text</span>(page.<span class="property">title</span>)
        ),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"post-description"</span>),
            .<span class="call">div</span>(
                .<span class="call">contentBody</span>(page.<span class="property">body</span>)
            )
        )
    )
}
</code></pre><p><strong><em>NOTE</em></strong> In here you'll see <code>page.title</code> and <code>page.body</code>. These attributes come from two places. When we create a new post or page as a markdown file, we can give it <code>metadata</code> at the top of the page, the title being one of those attributes. The <code>page.body</code> will be the remaining markdown or content of your file.</p><p>Here's an example of the <code>metadata</code>:</p><pre><code>---
date: <span class="number">2021</span>-<span class="number">01</span>-<span class="number">05 21</span>:<span class="number">04</span> 
description: <span class="type">A</span> detailed guide on customizing a website with the <span class="type">Publish</span> framework.
tags: development
excerpt: <span class="type">Customize</span> your <span class="type">Publish</span> site <span class="keyword">in</span> a few steps to <span class="keyword">get</span> the most out of this framework.
topic: development
title: <span class="type">Customizing</span> a <span class="type">Publish</span> site
---
</code></pre><h3>PageContent</h3><pre><code><span class="keyword">static func</span> pageContent(<span class="keyword">_</span> nodes: <span class="type">Node</span>...) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">div</span>(
        .<span class="call">class</span>(<span class="string">"content pure-u-1 pure-u-md-3-5 pure-u-xl-6-10"</span>),
        .<span class="call">group</span>(nodes)
    )
}
</code></pre><h3>PageExcerpt</h3><pre><code><span class="keyword">static func</span> postExcerpt(for item: <span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;, on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">section</span>(
        .<span class="call">class</span>(<span class="string">"post"</span>),
        .<span class="call">header</span>(
            .<span class="call">class</span>(<span class="string">"post-header"</span>),
            .<span class="call">h2</span>(
                .<span class="call">class</span>(<span class="string">"post-title"</span>),
                .<span class="call">a</span>(
                    .<span class="call">href</span>(item.<span class="property">path</span>),
                    .<span class="call">text</span>(item.<span class="property">title</span>)
                )
            ),
            .<span class="call">p</span>(
                .<span class="call">class</span>(<span class="string">"post-meta"</span>),
                .<span class="call">text</span>(<span class="type">DateFormatter</span>.<span class="property">blog</span>.<span class="call">string</span>(from: item.<span class="property">date</span>)),
                <span class="call">tagList</span>(for: item, on: site)
            )
        ),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"post-description"</span>),
            .<span class="call">p</span>(.<span class="call">text</span>(item.<span class="property">metadata</span>.<span class="property">excerpt</span>))
        )
    )
}
</code></pre><p><strong><em>NOTE</em></strong> Back in <code>main.swift</code> we need to add a new struct called <code>ItemMetaData</code>. This will allow us to show an excerpt of our blog posts to entice the reader even more.</p><pre><code><span class="keyword">struct</span> ItemMetadata: <span class="type">WebsiteItemMetadata</span> {
    <span class="keyword">var</span> excerpt: <span class="type">String</span>
}
</code></pre><p>Remember above in the <code>metadata</code> example we had the attribute <code>excerpt</code>? Well, this is it. Ok moving on.</p><h3>Post</h3><pre><code><span class="keyword">static func</span> post(for item: <span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;, on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">pageContent</span>(
        .<span class="call">h2</span>(
            .<span class="call">class</span>(<span class="string">"post-title"</span>),
            .<span class="call">a</span>(
                .<span class="call">href</span>(item.<span class="property">path</span>),
                .<span class="call">text</span>(item.<span class="property">title</span>)
            )
        ),
        .<span class="call">p</span>(
            .<span class="call">class</span>(<span class="string">"post-meta"</span>),
            .<span class="call">text</span>(<span class="type">DateFormatter</span>.<span class="property">blog</span>.<span class="call">string</span>(from: item.<span class="property">date</span>))
        ),
        .<span class="call">tagList</span>(for: item, on: site),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"post-description"</span>),
            .<span class="call">div</span>(
                .<span class="call">contentBody</span>(item.<span class="property">body</span>)
            )
        )
    )
}
</code></pre><p><strong><em>NOTE</em></strong> To show a user-friendly date we're going to need a helper. Create a new file in <code>Sources/</code> called <code>DateFormatter.swift</code>. Feel free to change this date format to whatever pleases you.</p><p>We'll get back to the <code>DateFormatter.blog.string(from: item.date)</code> part. Specifically the <code>.blog</code> part.</p><pre><code><span class="keyword">extension</span> <span class="type">DateFormatter</span> {
    <span class="keyword">static var</span> blog: <span class="type">DateFormatter</span> = {
        <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()
        formatter.<span class="property">dateStyle</span> = .<span class="dotAccess">long</span>
        <span class="keyword">return</span> formatter
    }()
}
</code></pre><h3>Posts</h3><pre><code><span class="keyword">static func</span> posts(for items: [<span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;], on site: &lt;<span class="type">SiteName</span>&gt;, title: <span class="type">String</span>) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">pageContent</span>(
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"posts"</span>),
            .<span class="call">h1</span>(.<span class="call">class</span>(<span class="string">"content-subhead"</span>), .<span class="dotAccess">text</span>(title)),
            .<span class="call">forEach</span>(items) { item <span class="keyword">in</span>
                .<span class="call">postExcerpt</span>(for: item, on: site)
            }
        )
    )
}
</code></pre><h3>Sidebar</h3><pre><code><span class="keyword">private static var</span> sections: [&lt;<span class="type">SiteName</span>&gt;.<span class="type">SectionID</span>] { [.<span class="dotAccess">blog</span>, .<span class="dotAccess">about</span>] }

<span class="keyword">static func</span> sidebar(for site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">div</span>(
        .<span class="call">class</span>(<span class="string">"sidebar pure-u-1 pure-u-md-1-4"</span>),
        .<span class="call">div</span>(
            .<span class="call">class</span>(<span class="string">"header"</span>),
            .<span class="call">grid</span>(
                .<span class="call">div</span>(
                    .<span class="call">class</span>(<span class="string">"pure-u-md-1-1 pure-u-3-4"</span>),
                    .<span class="call">h1</span>(
                        .<span class="call">a</span>(
                            .<span class="call">class</span>(<span class="string">"brand-title"</span>),
                            .<span class="call">text</span>(site.<span class="property">name</span>),
                            .<span class="call">href</span>(<span class="string">"/"</span>)
                        )

                    ),
                    .<span class="call">h3</span>(
                        .<span class="call">class</span>(<span class="string">"brand-tagline"</span>),
                        .<span class="call">text</span>(site.<span class="property">description</span>)
                    )
                )
            ),
            .<span class="call">div</span>(
                .<span class="call">ul</span>(
                    .<span class="call">class</span>(<span class="string">"pure-menu-list"</span>),
                    .<span class="call">forEach</span>(sections, { section <span class="keyword">in</span>
                        .<span class="call">li</span>(
                            .<span class="call">class</span>(<span class="string">"pure-menu-item"</span>),
                            .<span class="call">a</span>(
                                .<span class="call">class</span>(<span class="string">"pure-menu-link"</span>),
                                .<span class="call">text</span>(section.<span class="property">rawValue</span>.<span class="property">capitalized</span>),
                                .<span class="call">href</span>(site.<span class="call">path</span>(for: section))
                            )
                        )
                    })
                )
            ),
            .<span class="call">grid</span>(
                .<span class="call">forEach</span>(site.<span class="property">socialMediaLinks</span>, { link <span class="keyword">in</span>
                    .<span class="call">div</span>(
                        .<span class="call">class</span>(<span class="string">"pure-u-4-24"</span>),
                        .<span class="call">a</span>(
                            .<span class="call">href</span>(link.<span class="property">url</span>),
                            .<span class="call">icon</span>(link.<span class="property">icon</span>)
                        )
                    )
                })
            )
        )
    )
}
</code></pre><p><strong><em>NOTE</em></strong> I have two notes for this one. 1. <code>sections</code> are defined in <code>main.swift</code> under <code>SectionID</code>. This allows you to create separate <em>pages</em> such as <code>blog</code>, <code>about</code>, <code>podcast</code>, <code>videos</code>, etc. The name is a bit confusing because we're not creating "sections", but since the name <code>Page</code> is used in the Publish framework we can't use it here. 2. <code>socialMediaLinks</code> are also something we get in the framework, but we can extend it to add our own. Create a new file called <code>SocialMediaLink.swift</code> in <code>Sources/</code>. The basic structure is as follows:</p><pre><code><span class="keyword">struct</span> SocialMediaLink {
    <span class="keyword">let</span> title: <span class="type">String</span>
    <span class="keyword">let</span> url: <span class="type">String</span>
    <span class="keyword">let</span> icon: <span class="type">String</span>
}
</code></pre><p>Now you can extend this and add your own. For example</p><pre><code><span class="keyword">static var</span> github: <span class="type">SocialMediaLink</span> {
    <span class="keyword">return</span> <span class="type">SocialMediaLink</span>(
        title: <span class="string">"GitHub"</span>,
        url: <span class="string">"https://github.com/mosaic6"</span>,
        icon: <span class="string">"fab fa-github-square"</span>
    )
}
</code></pre><h3>TagList</h3><pre><code><span class="keyword">static func</span> tagList(for tags: [<span class="type">Tag</span>], on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">div</span>(.<span class="call">class</span>(<span class="string">"post-tags"</span>), .<span class="dotAccess">forEach</span>(tags) { tag <span class="keyword">in</span>
        .<span class="call">a</span>(
            .<span class="call">class</span>(<span class="string">"post-category post-category-</span>\(tag.<span class="property">string</span>.<span class="call">lowercased</span>())<span class="string">"</span>),
            .<span class="call">href</span>(site.<span class="call">path</span>(for: tag)),
            .<span class="call">text</span>(tag.<span class="property">string</span>)
        )
    })
}

<span class="keyword">static func</span> tagList(for item: <span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;, on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">tagList</span>(for: item.<span class="property">tags</span>, on: site)

}

<span class="keyword">static func</span> tagList(for page: <span class="type">TagListPage</span>, on site: &lt;<span class="type">SiteName</span>&gt;) -&gt; <span class="type">Node</span> {
    <span class="keyword">return</span> .<span class="call">tagList</span>(for: <span class="type">Array</span>(page.<span class="property">tags</span>), on: site)
}
</code></pre><hr><h2>Back to HTMLFactory</h2><p>This should cover all our <code>Nodes</code> for now. You can always create more or change what we have here to suit the needs of your site.</p><p>Now that we have our nodes, let's go back in time to our <code>HTMLFactory</code> and our empty methods.</p><h3>makeIndexHTML</h3><pre><code><span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>)
            )
        )
    )
}
</code></pre><h3>makeBlogSectionHTML</h3><pre><code><span class="keyword">func</span> makeBlogSectionHTML(for index: <span class="type">Index</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
                .<span class="call">posts</span>(for: context.<span class="call">allItems</span>(sortedBy: \.<span class="property">date</span>, order: .<span class="dotAccess">descending</span>), on: context.<span class="property">site</span>, title: <span class="string">"Posts"</span>)
            )
        )
    )
}
</code></pre><h3>makeSectionHTML</h3><pre><code><span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">SiteName</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="keyword">if</span> section.<span class="property">id</span> == .<span class="dotAccess">blog</span> {
        <span class="keyword">return try</span> <span class="call">makeBlogSectionHTML</span>(for: context.<span class="property">index</span>, context: context)
    }
    <span class="keyword">return try</span> <span class="call">makeIndexHTML</span>(for: context.<span class="property">index</span>, context: context)
}
</code></pre><h3>makeItemHTML</h3><pre><code><span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">SiteName</span>&gt;, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
                .<span class="call">post</span>(for: item, on: context.<span class="property">site</span>)
            )

        )
    )
}
</code></pre><h3>makePageHTML</h3><pre><code><span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
                .<span class="call">page</span>(for: page, on: context.<span class="property">site</span>)
            )
        )
    )
}
</code></pre><h3>makeTagListHTML</h3><pre><code><span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
                .<span class="call">pageContent</span>(
                    .<span class="call">tagList</span>(for: page, on: context.<span class="property">site</span>)
                )
            )
        )
    )
}
</code></pre><h3>makeTagDetailsHTML</h3><pre><code><span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>, context: <span class="type">PublishingContext</span>&lt;<span class="type">SiteName</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {
    <span class="type">HTML</span>(
        .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
        .<span class="call">head</span>(for: context.<span class="property">site</span>),
        .<span class="call">body</span>(
            .<span class="call">grid</span>(
                .<span class="call">sidebar</span>(for: context.<span class="property">site</span>),
                .<span class="call">posts</span>(
                    for: context.<span class="call">items</span>(
                        taggedWith: page.<span class="property">tag</span>,
                        sortedBy: \.<span class="property">date</span>,
                        order: .<span class="dotAccess">descending</span>
                    ),
                    on: context.<span class="property">site</span>,
                    title: <span class="string">"</span>\(page.<span class="property">tag</span>.<span class="property">string</span>.<span class="property">capitalized</span>) <span class="string">posts"</span>
                )
            )
        )
    )
}
</code></pre><h2>3. Creating our theme</h2><p>It's time to put it all together. In <code>Sources/</code> create a new file called <code>Theme+&lt;SiteName&gt;.swift</code>. This is where we'll define our theme from the <code>HTMLFactory</code> we just created. Here is what it'll look like:</p><pre><code><span class="keyword">import</span> Publish
<span class="keyword">import</span> Plot

<span class="keyword">extension</span> <span class="type">Theme</span> <span class="keyword">where</span> <span class="type">Site</span> == <span class="type">SiteName</span> {
    <span class="keyword">static var</span> blog: <span class="type">Self</span> {
        <span class="type">Theme</span>(htmlFactory: &lt;<span class="type">SiteName</span>&gt;<span class="type">HTMLFactory</span>(), resourcePaths: [<span class="string">"Resources/Pure/styles.css"</span>])
    }
}
</code></pre><p>You can call your theme whatever you want, I'm using <code>blog</code> since my site really is a blog 🤷‍♂️. Finally back in <code>main.swift</code> we'll use our new theme when publishing our site.</p><pre><code><span class="keyword">try</span> <span class="type">SiteName</span>().<span class="call">publish</span>(    
    withTheme: .<span class="dotAccess">blog</span>,
    deployedUsing: .<span class="call">gitHub</span>(<span class="string">"&lt;username&gt;/&lt;username&gt;.github.io"</span>, useSSH: <span class="keyword">false</span>)
)
</code></pre><h1>Conclusion</h1><p>While the <code>.foundation</code> theme is great out of the box for getting a site up and running quickly, it does limit your styling options. With a little effort and customization you can create your own theme, and truly make a Publish site your own. I'd like to thank <a href="https://www.swiftbysundell.com">John Sundell</a> for creating such a dynamic tool for Swift developers to build their websites with. Go forth and build something cool!</p><p>“I'm not dumb. I just have a command of thoroughly useless information.” ― Bill Watterson</p>]]></content:encoded></item><item><guid isPermaLink="true">https://joshuatwalsh.com/blog/01-07-2021-publish-and-github-pages</guid><title>Creating a website with Publish and Github Pages</title><description>Creating a website with Publish and Github Pages</description><link>https://joshuatwalsh.com/blog/01-07-2021-publish-and-github-pages</link><pubDate>Mon, 4 Jan 2021 21:04:00 -0500</pubDate><content:encoded><![CDATA[<h1>Creating a website with Publish and Github Pages</h1><p>If you've heard about Publish, you know it's a Swift developer's friend when it comes to creating their own website. There are a lot of really cool things about this tool, and some frustrating bits as well. I'll walk you through some of the "gotchya's" I faced so hopefully, you get a smoother experience.</p><h2>Getting started with Publish</h2><p>Let's start with some of the simple parts. Head over to <a href="https://github.com/johnsundell/publish#quick-start">Publish</a> for the official getting started part. I'll summarize here.</p><h3>Install the command-line tool</h3><p>This will install all necessary dependencies and the command-line tool for generating websites with Publish.</p><pre><code>$ git clone https://github.<span class="property">com</span>/<span class="type">JohnSundell</span>/<span class="type">Publish</span>.<span class="property">git</span>
$ cd <span class="type">Publish</span>
$ make
</code></pre><h2>Important note</h2><p>I'll be using <code>&lt;username&gt;</code> to indicate places where you should use <em>your</em> Github username.</p><hr><h3>Create your project folder</h3><p><em>Don't create your project folder inside the <code>Publish</code> folder</em>. Make sure you create your project folder somewhere in an empty folder, or directly onto your desktop. I like to put all my development work inside a folder in my root directory called <code>Projects</code>. But you do you.</p><pre><code>$ mkdir &lt;username&gt;.<span class="property">github</span>.<span class="property">io</span>
$ cd &lt;username&gt;.<span class="property">github</span>.<span class="property">io</span>
$ publish new
</code></pre><p>After running <code>publish new</code> you'll have a new project inside your folder with everything you need to get started.</p><h3>Open your project</h3><pre><code>$ <span class="keyword">open</span> <span class="type">Package</span>.<span class="property">swift</span>
</code></pre><p>This will open XCode and resolve all package dependencies for you. It's magic.</p><h2>Setting up your Github Page</h2><p>In your Github account, create a new repository. Give it a name with the following format. <code>&lt;username&gt;.github.io</code>.</p><p>This is all you need to do (right now) for your repository. Press <code>Create Repository</code> and jump back over to Xcode.</p><p>Before we start styling or writing any content, let's get our site live so we can see what the end result will be on Github. You can also test this out locally by running the following command in Terminal.</p><pre><code>$ publish run
</code></pre><p>This will spin up a local web server for you to see your changes. Open your web browser and go to <code>localhost:8000</code></p><h2>Creating a new working branch</h2><p>In your project folder in Terminal run the following commands</p><pre><code>$ git <span class="keyword">init</span>
$ git checkout -b posts
</code></pre><p>You can call your branch whatever you want as long as it's not <code>master</code>. Publish and Github pages reserve the <code>master</code> branch for your site's generated output. When we run the <code>publish deploy</code> command it will push your <code>output</code> folder changes to the <code>master</code> branch and not your working branch.</p><h2>Back to Xcode</h2><h3>Open the <code>main.swift</code> file.</h3><p>In this file you're going to see the last line that looks like this:</p><pre><code><span class="keyword">try</span> <span class="type">Mosaic6GithubIo</span>().<span class="call">publish</span>(with theme: .<span class="dotAccess">foundation</span>)
</code></pre><p>Let's change it so we can push our page up to Github. Here is what it should look like:</p><pre><code><span class="keyword">try</span> <span class="type">Mosaic6GithubIo</span>().<span class="call">publish</span>(
  withTheme: .<span class="dotAccess">foundation</span>,
  deployedUsing: .<span class="call">gitHub</span>(<span class="string">"&lt;username&gt;/&lt;username&gt;.github.io"</span>, useSSH: <span class="keyword">false</span>)
)
</code></pre><h2>Back to Terminal</h2><h3>Get ready to push to Github</h3><p>Now we are ready to push our changes to our <code>posts</code> branch and deploy our site. Run the following commands:</p><pre><code>$ git add .
$ git commit -m <span class="string">"Initial commit"</span>
$ git remote add origin https://github.<span class="property">com</span>/&lt;username&gt;/&lt;username&gt;.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span>
$ git push -u origin posts
</code></pre><p>This will add your branch to Github without any generated output. Now let's generate some HTML for our site.</p><pre><code>$ publish generate
</code></pre><p>This generates the website in your current folder. Your <code>Output</code> folder should now have some additional files in it. You shouldn't need to touch these files since all our work will be done writing <code>Swift</code> and <code>Markdown</code>.</p><h2>Time to deploy</h2><pre><code>$ publish deploy
</code></pre><h1>👏 You did it!</h1><p>You pushed your generated site up to Github, on to a newly created <code>master</code> branch. Go check it out.</p><p>You can see your new branch by clicking the dropdown branch picker. Go ahead, click it.</p><img src="https://joshuatwalsh.com/images/change-branch.png" alt="Branch names" width="300"/><p><em>As you can see I called my working branch <code>main</code></em></p><p>When you switch branches on Github you'll see the difference in what files and folders are on each branch.</p><p>There is one more thing to change before we can see our site go live. Head to the settings page on your repo and scroll down to the <code>Github Pages</code> section.</p><p>Here we'll want to make sure our <code>Source</code> is set to the <code>master</code> branch, and our path is set to the <code>/(root)</code> folder. This will ensure we load our site from the <code>index.html</code> file found in the <code>master</code> branch.</p><img src="https://joshuatwalsh.com/images/source-pages.png" alt="Master source" width="500"/><p>This should save automatically for you, and after a few minutes you can open a new browser window and go to <code>&lt;username&gt;.github.io</code></p><h2>Conclusion</h2><p>While we didn't add any content to our site, we did manage to get it up and running to Github Pages for a live studio audience. I plan to follow up with a <code>Customize your Publish site</code> post, that will go over how to add new pages, change your styling, and add a custom URL.</p>]]></content:encoded></item></channel></rss>